import { Hono } from 'hono';
import { cors } from 'hono/cors';
import { GoogleGenerativeAI } from '@google/generative-ai';

// Определение констант (ранее в constants.ts)
const PRODUCT_TYPES = ['Коробка', 'Пакет бумажный', 'Тишью бумага'];
const BOX_TYPES = ['Самосборная', 'Крышка-дно', 'Пенал'];
const MATERIALS = ['Мелованная бумага', 'Гофрокартон Т23 БЕЛЫЙ', 'Бумага Futbort', 'Тишью', 'Картон', 'Специальная/дизайнерская бумага', 'Крафт-бумага'];
const PRINT_TYPES = ['Офсетная печать', 'Флексография', 'Цифровая печать', 'Шелкография'];
const FINISH_TYPES = ['Матовая ламинация', 'Глянцевая ламинация', 'Soft-touch ламинация', 'УФ-лак (выборочный/сплошной)', 'Тиснение (фольгой/конгрев)', 'Вырубка'];
const HANDLE_TYPES = ['Лента репсовая', 'Веревочные', 'Бумажные', 'Вырубная ручка'];
const HANDLE_ATTACHMENTS = ['Вклеенные', 'На люверсах'];

// Функция для парсинга CSV-строки
function parseCSV(csvString) {
  const lines = csvString.trim().split('\n');
  const headers = lines[0].split(',').map(header => header.trim());
  const data = [];

  for (let i = 1; i < lines.length; i++) {
    const values = lines[i].split(',');
    const row = {};
    for (let j = 0; j < headers.length; j++) {
      row[headers[j]] = values[j] ? values[j].trim() : '';
    }
    data.push(row);
  }
  return data;
}

const app = new Hono();

// Настройка CORS
app.use('/*', cors());

// База знаний и правила ценообразования (ранее в constants.ts)
const KNOWLEDGE_BASE_STRUCTURE_PROMPT = `
Твоя база знаний - это аналог Google Таблицы со следующими колонками:
ID (уникальный идентификатор),
ProductType (Тип продукции: ${PRODUCT_TYPES.join(', ')}, Бирка),
SpecificType (Уточнение типа, например, для коробок: ${BOX_TYPES.join(', ')}),
Quantity (Количество, шт.),
PricePerUnit_CNY (Цена за единицу, юани),
Width_mm (Ширина, мм),
Height_mm (Высота, мм),
Depth_mm (Глубина/Толщина, мм),
Material (Материал: ${MATERIALS.join(', ')}, или конкретное название, например, "Гофрокартон Т23 БЕЛЫЙ", "бумага futbort"),
MaterialDensity_gsm (Плотность материала, г/м2, если применимо),
PrintColors_Outer (Цветность снаружи, например, "4+0 CMYK", "1+0 Pantone", "Без печати", "черный логотип"),
PrintColors_Inner (Цветность внутри, аналогично, например "внутри пакет белый"),
PrintType (Тип печати: ${PRINT_TYPES.join(', ')}),
Finish1 (Отделка 1: ${FINISH_TYPES.join(', ')}),
Finish2 (Отделка 2, и т.д.),
HandlesType (Тип ручек для пакетов: ${HANDLE_TYPES.join(', ')}, "петлевые", "тонкие"),
HandleAttachment (Крепление ручек: ${HANDLE_ATTACHMENTS.join(', ')}, "приклеивание"),
Fittings (Фурнитура, например, "Люверсы", "Магниты"),
Notes (Примечания, например, "Сложная высечка", "Срочный заказ", "текстура основы хлопковая").

Примеры записей (гипотетические, для понимания структуры):
- ID: 1, ProductType: Пакет бумажный, Quantity: 1000, PricePerUnit_CNY: 2.5, Width_mm: 300, Height_mm: 400, Depth_mm: 100, Material: Мелованная бумага, MaterialDensity_gsm: 230, PrintColors_Outer: 4+0 CMYK, PrintType: Офсетная печать, Finish1: Матовая ламинация, HandlesType: Лента репсовая, HandleAttachment: Вклеенные.
- ID: 2, ProductType: Коробка, SpecificType: Самосборная, Quantity: 500, PricePerUnit_CNY: 5.0, Width_mm: 200, Height_mm: 150, Depth_mm: 50, Material: Гофрокартон Т23, PrintColors_Outer: 1+0 Pantone, PrintType: Флексография.
- ID: 3, ProductType: Тишью бумага, Quantity: 5000, PricePerUnit_CNY: 0.3, Width_mm: 500, Height_mm: 700, Depth_mm: N/A, Material: Тишью, MaterialDensity_gsm: 17, PrintColors_Outer: 1+0 Pantone.
- ID: 4, ProductType: Бирка, Quantity: 6000, PricePerUnit_CNY: 0.5, Width_mm: 60, Height_mm: 100, Material: Картон, MaterialDensity_gsm: 300, PrintColors_Outer: "тиснение белым", Notes: "текстура хлопковая, отверстие 5мм".
`;

const PRICING_RULES_PROMPT = `
Важные правила и особенности ценообразования:

**Общие принципы:**
1.  **КЛЮЧЕВОЕ ПРАВИЛО: Зависимость цены от тиража:** Цена за единицу ОБЯЗАТЕЛЬНО и ЗНАЧИТЕЛЬНО снижается при увеличении тиража, ЕСЛИ ВСЕ ОСТАЛЬНЫЕ ПАРАМЕТРЫ АБСОЛЮТНО ИДЕНТИЧНЫ. Это нелинейная зависимость. Если рассчитываешь два варианта одного изделия, отличающихся только тиражом, вариант с большим тиражом ДОЛЖЕН иметь МЕНЬШУЮ цену за единицу. Например, цена за 1000шт обычно на 20-40% ниже цены за 500шт для пакетов.
2.  Материалы: Специализированные и дизайнерские бумаги, плотный картон (300г/м2 и выше), кашированный микрогофрокартон, специфические марки гофрокартона дороже стандартных.
3.  Сложность печати: Большее количество цветов, печать Pantone, полноцветная печать на больших поверхностях увеличивают стоимость. Печать внутри изделия также добавляет к цене.
4.  Отделка: Каждый вид отделки (ламинация, тиснение, УФ-лак, конгрев) добавляет к стоимости. Комбинация нескольких видов отделки может существенно увеличить цену.
5.  Размеры и сложность конструкции: Большие размеры требуют больше материала. Сложные конструкции дороже простых.
6.  Фурнитура: Люверсы, магниты, ленты для завязывания и т.п. добавляют к стоимости.
7.  Если точного аналога в базе нет: Постарайся интерполировать/экстраполировать на основе наиболее близких по параметрам заказов, используя эти правила.
8.  **Точность и диапазон:** Предоставляемая тобой точечная оценка должна быть твоей наилучшей оценкой *средней* цены. Пользователь увидит диапазон ±15% от этой оценки. Старайся, чтобы твоя средняя оценка была максимально близка к реальной рыночной цене для аналогичных заказов в Китае.
9.  Если данных совсем мало для уверенной оценки, или параметры очень необычные, укажи это, но все равно предложи наиболее вероятное значение.

**Ценовые ориентиры для ПАКЕТОВ (основаны на примерах):**

10. **Базовые пакеты из мелованной бумаги (200-250 г/м²):**
    *   Малые (например, ШхВхГ около 115x175x50 мм), полноцвет, ламинация: 1000 шт. ~2.9-3.2 ¥/шт; 500 шт. ~3.9-4.3 ¥/шт.
    *   Средние (например, 200x230x100 мм), полноцвет, ламинация: 1000 шт. ~3.3-3.8 ¥/шт; 500 шт. ~4.6-5.0 ¥/шт.
    *   Крупные (например, 250x350x100 мм), полноцвет, ламинация: 1000 шт. ~4.0-4.5 ¥/шт; 500 шт. ~5.2-5.8 ¥/шт.
    *   Очень крупные (например, 250x300x170 мм): 1000 шт. ~4.3-4.8 ¥/шт; 500 шт. ~5.6-6.2 ¥/шт.

11. **Крафт-пакеты (120-180 г/м²):**
    *   Простая печать (1-2 цвета), без сложной отделки, обычно на 25-40% дешевле аналогичных мелованных.
    *   Пример: 360x300x120 мм, 140 г/м², печать 1+0, тираж 3000 шт. ~1.4-1.8 ¥/шт.
    *   Пример: 400x250x130 мм, 180 г/м², обычная печать, тираж 1000 шт. ~2.8-3.2 ¥/шт; 500 шт. ~4.6-5.0 ¥/шт.

12. **Пакеты из специальной/дизайнерской бумаги (например, плотные 270г+):**
    *   Могут быть на 30-70% дороже стандартных мелованных, особенно с тиснением.
    *   Пример: спецбумага 270г, тиснение, 280x220x100мм, 1000 шт. ~7.8-8.5 ¥/шт; 500 шт. ~8.8-9.5 ¥/шт.
    *   Пример: белый пакет, тиснение фольгой, хлопковая ручка, 200х300х40мм(?? не стандартные пропорции), 500 шт. ~8.0-9.0 ¥/шт.

13. **Влияние отделки на пакеты:**
    *   Тиснение (золото/серебро/фольга): +0.6 до +1.8 ¥/шт. в зависимости от размера тиснения и тиража.
    *   Люверсы: +0.3 до +0.6 ¥/шт.
    *   Горячее тиснение золотом для логотипа: +0.8 до +1.5 ¥/шт.

14. **Ручки для пакетов:**
    *   Стандартные веревочные/бумажные часто включены.
    *   Ленточные (атлас, репс, хлопок), особенно вклеенные или на люверсах: +0.4 до +1.0 ¥/шт.
    *   Вырубная ручка: обычно не сильно меняет цену по сравнению со стандартной веревочной, если материал позволяет.

**Ценовые ориентиры для КОРОБОК (основаны на примерах):**

15. **Короб "самолет" из гофрокартона (кашированный или с прямой печатью):**
    *   Малый (ШхДхВ ~140x180x80 мм), простая печать, тираж 1000 шт. - цена может быть в районе 4-7 ¥/шт, для 500 шт - 5-9 ¥/шт.
    *   Средний (400х300х100 мм), кашированный, сложная печать/пантон, возможно тиснение, 500 шт. ~18-25 ¥/шт. (зависит от тиснения).
    *   Крупный (600х500х170 мм), кашированный, глянцевый, сложная печать (серебро), 1000 шт. ~30-38 ¥/шт; 500 шт. ~45-55 ¥/шт.
    *   Пример: Короб самолет, лого синий, снаружи серебро, внутри синий, 320х320х120мм, 500 шт ~19-23 ¥/шт.

16. **Короб из микрогофрокартона, обклеенный меловкой, полноцвет:**
    *   Пример: ~500х200х150 мм (усредненный от нескольких размеров), тираж 5000 шт. ~5.0-7.0 ¥/шт. за каждый из размеров.

**Ценовые ориентиры для БИРОК:**

17. **Бирки картонные (плотность 0.6-0.8мм / ~300-400г/м2):**
    *   Размер ~60x100 мм, тиснение, отверстие, тираж 6000 шт. ~0.4-0.8 ¥/шт. (зависит от сложности тиснения и текстуры).

Помни, что эти цены - ОРИЕНТИРЫ. Конечная цена сильно зависит от КОНКРЕТНОГО ПОСТАВЩИКА, текущей загрузки производства, сложности дизайна и других факторов. Твоя задача - дать наиболее вероятную оценку, основанную на этих правилах и твоем общем понимании рынка.
`;

// Инициализация Gemini API - перемещено внутрь маршрута
// const genAI = new GoogleGenerativeAI(c.env.GOOGLE_API_KEY);

// Обработка запросов к Gemini
app.post('/api/ask', async (c) => {
  try {
    console.log("Received /api/ask request");
    const { query } = await c.req.json();
    console.log("Query received: ", query);
    const genAI = new GoogleGenerativeAI(c.env.GOOGLE_API_KEY, { api_endpoint: 'generativelanguage.googleapis.com' }); // Инициализация здесь с явным эндпоинтом
    console.log("GoogleGenerativeAI initialized.");
    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-001' });
    console.log("Gemini model obtained.");
    
    // Получение и парсинг базы знаний из KV
    const ordersCsv = await c.env.ORDERS_KB.get('orders_data');
    let historicalOrdersPrompt = '';
    if (ordersCsv) {
      const ordersData = parseCSV(ordersCsv);
      historicalOrdersPrompt = `\nПримеры предыдущих заказов (в формате CSV, для справки):
${ordersCsv}

`; // Включаем весь CSV как есть, Gemini достаточно умна, чтобы понять его.
    }

    const combinedPrompt = `
${KNOWLEDGE_BASE_STRUCTURE_PROMPT}

${PRICING_RULES_PROMPT}

${historicalOrdersPrompt}
Вы являетесь экспертом по расчету стоимости упаковки. Ваша задача - анализировать запросы клиентов и предоставлять предварительный расчет стоимости и детали заказа на упаковку. Используйте информацию из запроса для формирования ответа.

Формат ответа должен быть следующим:

# 📦 Расчет стоимости упаковки

## 📋 Детали заказа:
* **Тип упаковки:** [Например, Пакет из медной бумаги]
* **Материал:** [Например, Медная бумага, 280 г/м²]
* **Внутренняя часть:** [Например, Белая]
* **Печать:** [Например, Обычная печать логотипа (требуется макет для точной оценки)]
* **Ламинация:** [Например, Сенсорная (soft-touch) пленка]
* **Отверстия под ручки:** [Например, Диаметр 6 мм]
* **Ручки:** [Например, Не нужны]
* **Цвет:** [Например, Темно-серый]
* **Размер:** [Например, 36 см (ширина) × 27 см (высота) × 18 см (глубина)]
* **Количество:** [Например, 1000 штук]

## 💰 Стоимость:
**Итоговая стоимость заказа: [Например, 12 345.67 ¥]**

*Примечание: Это предварительная оценка. Точная стоимость может быть скорректирована после оценки макета и уточнения всех деталей заказа.*

Если какой-то информации нет в запросе, укажите "Не указано" или "По умолчанию" там, где это применимо.

Клиентский запрос: ${query}

Отвечайте только в указанном формате, не добавляйте лишний текст до или после него. Если запрос не относится к расчету стоимости упаковки, извинитесь и скажите, что вы предназначены только для расчетов стоимости упаковки.`;

    const result = await model.generateContent(combinedPrompt);
    console.log("Content generation result received.");
    const response = await result.response;
    const text = response.text();
    console.log("Response text: ", text);
    
    // Сохраняем лог в KV
    const requestId = crypto.randomUUID();
    await c.env.LOGS.put(requestId, JSON.stringify({
      requestId,
      timestamp: new Date().toISOString(),
      query,
      response: text,
      price: 0.00025 // Примерная стоимость запроса
    }));
    
    return c.json({ response: text, requestId });
  } catch (error) {
    console.error('Error:', error);
    return c.json({ error: error.message }, 500);
  }
});

// Получение логов
app.get('/api/logs', async (c) => {
  try {
    const logs = [];
    const list = await c.env.LOGS.list();
    
    for (const key of list.keys) {
      const value = await c.env.LOGS.get(key.name);
      if (value) {
        logs.push(JSON.parse(value));
      }
    }
    
    return c.json({ logs });
  } catch (error) {
    console.error('Error:', error);
    return c.json({ error: error.message }, 500);
  }
});

// Обработка обратной связи
app.post('/api/feedback', async (c) => {
  try {
    const { requestId, actualPrice } = await c.req.json();
    const log = await c.env.LOGS.get(requestId);
    
    if (log) {
      const logData = JSON.parse(log);
      logData.feedback = actualPrice;
      await c.env.LOGS.put(requestId, JSON.stringify(logData));
      return c.json({ success: true });
    }
    
    return c.json({ error: 'Log not found' }, 404);
  } catch (error) {
    console.error('Error:', error);
    return c.json({ error: error.message }, 500);
  }
});

export default {
  fetch: app.fetch,
}; 